generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MessageRole {
  user
  assistant
}

enum JobStatus {
  open
  closed
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  phone    String
  password String

  chats        Chat[]
  cv           CVInfo?
  jobsPosted   Job[]         @relation("PostedJobs")
  applications Application[]
  jobsGotten   Application[] @relation("JobsGotten")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Chat {
  id    String @id @default(uuid())
  title String

  messages Message[]
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

model Message {
  id      String      @id @default(uuid())
  content String
  role    MessageRole

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model CVInfo {
  id     String @id @default(uuid())
  name   String
  ufsUrl String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cv_infos")
}

model Job {
  id          String    @id @default(uuid())
  title       String
  description String
  location    String
  salary      String?
  company     String
  status      JobStatus @default(open)

  applications Application[]
  postedById   String
  postedBy     User          @relation("PostedJobs", fields: [postedById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

model Application {
  id        String            @id @default(uuid())
  coverNote String?
  status    ApplicationStatus @default(pending)

  jobId     String
  userId    String
  hiredById String?
  job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hiredBy   User?   @relation("JobsGotten", fields: [hiredById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("applications")
}
